<div id="courses-registration-widget-{{ widgetInstance.getId() }}">
    <div id="courses-list-{{ widgetInstance.getId() }}">
        {% if mode == 0 %}
            {{
                render(controller(
                    'ClarolineCursusBundle:Cursus:coursesListForRegistrationWidget',
                    {'widgetInstance': widgetInstance.getId()}
                ))
            }}
        {% elseif mode == 1 %}
            {{
                render(controller(
                    'ClarolineCursusBundle:Cursus:coursesListForRegistrationWidgetCalendar',
                    {'widgetInstance': widgetInstance.getId()}
                ))
            }}
        {% endif %}
    </div>
</div>

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/frontend/fullcalendar/dist/fullcalendar.min.css') }}"/>
    <link rel="stylesheet" href="{{ asset('bundles/frontend/fullcalendar/dist/fullcalendar.print.css') }}" media="print"/>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('bundles/frontend/moment/min/moment-with-locales.min.js') }}"></script>
    <script src="{{ asset('bundles/frontend/fullcalendar/dist/fullcalendar.min.js') }}"></script>
    {% javascripts debug=false
        'js/translations/agenda/*.js'
        'js/translations/cursus/*.js'
        'js/translations/platform/*.js'
        %}<script src="{{ asset_url }}"></script>
    {% endjavascripts %}
    <script>
      (function () {
        const widgetInstanceId = {{ widgetInstance.getId() }}
        let mode = ({{ mode }} === 1) ? 'calendar' : 'list'
        let currentSearch = ''
        let currentMax = 20
        let currentOrderedBy = 'title'
        let currentOrder = 'ASC'
        const sessionsIdx = 'sessions_' + widgetInstanceId
        const registeredSessionsIdx = 'registered-sessions_' + widgetInstanceId
        const pendingSessionsIdx = 'pending-sessions_' + widgetInstanceId
        let sessions = []
        let events = []
        let registeredSessions = []
        let pendingSessions = []
        const widgetElement = $(`#courses-registration-widget-${widgetInstanceId}`)
        const listElement = $(`#courses-list-${widgetInstanceId}`)

        function refreshCoursesList () {
          const route = mode === 'list' ?
            Routing.generate(
              'claro_cursus_courses_list_for_registration_widget',
              {
                'widgetInstance': widgetInstanceId,
                'search': currentSearch,
                'max': currentMax,
                'orderedBy': currentOrderedBy,
                'order': currentOrder
              }
            ) :
            Routing.generate(
              'claro_cursus_courses_list_for_registration_widget_calendar',
              {'widgetInstance': widgetInstanceId, 'search': currentSearch}
            )
          $.ajax({
            url: route,
            type: 'GET',
            success: function (datas) {
              listElement.html(datas)

              if (mode === 'calendar') {
                initializeCalendar()
              }
            }
          })
        }

        widgetElement.on('click', 'a', function (event) {
          event.preventDefault()

          if ($(this).hasClass('session-info-link')) {
            const sessionId = $(this).data('session-id')
            const url = Routing.generate(
              'claro_courses_widget_session_informations',
              {widgetInstance: widgetInstanceId, session: sessionId, withWorkspace: 0, withMail: 0}
            )
            window.Claroline.Modal.fromUrl(url)
          } else if ($(this).hasClass('event-info-link')) {
            const eventId = $(this).data('event-id')
            const url = Routing.generate('claro_courses_widget_session_event_informations', {sessionEvent: eventId, withMail: 0})
            window.Claroline.Modal.fromUrl(url)
          } else {
            const element = event.currentTarget
            const route = $(element).attr('href')

            $.ajax({
              url: route,
              type: 'GET',
              success: function (datas) {
                listElement.html(datas)
              }
            })
          }
        })

        widgetElement.on('click', '#search-course-btn', function () {
          currentSearch = $('#search-course-input').val()
          refreshCoursesList()
        })

        widgetElement.on('keypress', '#search-course-input', function (e) {
          if (e.keyCode === 13) {
            e.preventDefault();
            currentSearch = $(this).val()
            refreshCoursesList()
          }
        })

        widgetElement.on('click', '.session-register-btn', function () {
          const sessionId = $(this).data('session-id')

          window.Claroline.Modal.confirmRequest(
            Routing.generate('claro_cursus_course_session_self_register', {'session': sessionId}),
            removeRegistrationBtn,
            sessionId,
            Translator.trans('session_self_registration_message', {}, 'platform'),
            Translator.trans('session_registration', {}, 'platform')
          )
        })

        widgetElement.on('click', '.course-queue-request-btn', function () {
          const courseId = $(this).data('course-id')

          window.Claroline.Modal.confirmRequest(
            Routing.generate('claro_cursus_course_queue_register', {'course': courseId}),
            updateCourseQueueRequetBtn,
            courseId,
            Translator.trans('next_session_registration_request_message', {}, 'platform'),
            Translator.trans('next_session_registration_request', {}, 'platform')
          )
        })

        widgetElement.on('click', '.cancel-course-queue-request-btn', function () {
          const courseId = $(this).data('course-id')

          window.Claroline.Modal.confirmRequest(
            Routing.generate('claro_cursus_course_queue_cancel', {'course': courseId}),
            updateCourseQueueRequetCancelBtn,
            courseId,
            Translator.trans('next_session_registration_request_cancel_message', {}, 'platform'),
            Translator.trans('next_session_registration_request_cancel', {}, 'platform')
          )
        })

        widgetElement.on('click', '#calendar-view-button', function () {
          const route = Routing.generate(
            'claro_cursus_courses_list_for_registration_widget_calendar',
            {'widgetInstance': widgetInstanceId, 'search': currentSearch}
          )

          $.ajax({
            url: route,
            type: 'GET',
            success: function (datas) {
              listElement.html(datas)
              mode = 'calendar'
              initializeCalendar()
            }
          })
        })

        widgetElement.on('click', '#list-view-button', function () {
          const route = Routing.generate(
            'claro_cursus_courses_list_for_registration_widget',
            {'widgetInstance': widgetInstanceId, 'search': currentSearch, 'max': currentMax, 'orderedBy': currentOrderedBy, 'order': currentOrder}
          )

          $.ajax({
            url: route,
            type: 'GET',
            success: function (datas) {
              listElement.html(datas)
              mode = 'list'
            }
          })
        })

        const removeRegistrationBtn = function (event, sessionId) {
          $('#session-registration-btn-' + sessionId).empty()
          const element = '<span class="label label-success"><i class="fa fa-check"></i></span>'
          $('#session-registration-btn-' + sessionId).html(element)
        }

        const removeRegistrationBtnCalendar = function (event, datas) {
          pendingSessions[datas['sessionId']] = true
          datas['context'].addClass('disabled')
        }

        const updateCourseQueueRequetBtn = function (event, courseId) {
          let courseQueueBtn = $('#course-queue-btn-' + courseId)
          courseQueueBtn.removeClass('course-queue-request-btn')
          courseQueueBtn.addClass('cancel-course-queue-request-btn')
          courseQueueBtn.empty()
          const element = `<span class="label label-success">${Translator.trans('request_done', {}, 'platform')}</span>`
          courseQueueBtn.html(element)
        }

        const updateCourseQueueRequetCancelBtn = function (event, courseId) {
          let courseQueueBtn = $('#course-queue-btn-' + courseId)
          courseQueueBtn.removeClass('cancel-course-queue-request-btn')
          courseQueueBtn.addClass('course-queue-request-btn')
          courseQueueBtn.empty()
          const element = `<span class="label label-info">${Translator.trans('next_session_registration_request', {}, 'platform')}</span>`
          courseQueueBtn.html(element)
        }

        function t (key) {
          if (typeof key === 'object') {
            let transWords = []

            for (let i = 0; i < key.length; i++) {
              transWords.push(Translator.trans(key[i], {}, 'agenda'))
            }
            return transWords
          }
          return Translator.trans(key, {}, 'agenda')
        }

        function initializeEvents () {
          events = []
          sessions.forEach(s => {
            s['title'] = s['course']['title']
            s['start']= s['startDate']
            s['end']= s['endDate']
            s['editable']= false
            s['allDay']= false
            s['className']= 'pointer-hand'

            if (s['publicRegistration']) {
              s['color'] = '#337AB7'
            } else {
              s['color'] = '#D9534F'
            }
            events.push(s)
          })
        }

        function initializeCalendar () {
          sessions = (typeof window[sessionsIdx] === 'undefined') ? [] : JSON.parse(window[sessionsIdx])
          registeredSessions = (typeof window[registeredSessionsIdx] === 'undefined') ? [] : window[registeredSessionsIdx]
          pendingSessions = (typeof window[pendingSessionsIdx] === 'undefined') ? [] : window[pendingSessionsIdx]
          initializeEvents()
          $('#courses-widget-calendar-' + widgetInstanceId).fullCalendar({
            header: {
              left: 'prev,next, today',
              center: 'title',
              right: 'month,agendaWeek,agendaDay'
            },
            columnFormat: {
              month: 'ddd',
              week: 'ddd D/M',
              day: 'dddd D/M'
            },
            buttonText: {
              prev: t('prev'),
              next: t('next'),
              prevYear: t('prevYear'),
              nextYear: t('nextYear'),
              today: t('today'),
              month: t('month_'),
              week: t('week'),
              day: t('day_')
            },
            firstDay: 1,
            monthNames: t(['month.january', 'month.february', 'month.march', 'month.april', 'month.may', 'month.june', 'month.july', 'month.august', 'month.september', 'month.october', 'month.november', 'month.december']),
            monthNamesShort: t(['month.jan', 'month.feb', 'month.mar', 'month.apr', 'month.may', 'month.ju', 'month.jul', 'month.aug', 'month.sept',  'month.oct', 'month.nov', 'month.dec']),
            dayNames: t(['day.sunday', 'day.monday', 'day.tuesday', 'day.wednesday', 'day.thursday', 'day.friday', 'day.saturday']),
            dayNamesShort: t(['day.sun', 'day.mon', 'day.tue', 'day.wed', 'day.thu', 'day.fri', 'day.sat']),
            //This is the url which will get the events from ajax the 1st time the calendar is launched
            events: events,
            axisFormat: 'HH:mm',
            timeFormat: 'H:mm',
            agenda: 'h:mm{ - h:mm}',
            allDayText: t('isAllDay'),
            lazyFetching : false,
            fixedWeekCount: false,
            eventLimit: false,
            timezone: 'local',
            eventClick:  onEventClick
          })
        }

        function onEventClick (event, jsEvent) {
            console.log(event)
          jsEvent.stopPropagation()
          jsEvent.preventDefault()
          let registerBtn = ''
          let eventsElement = `
            <h4>${Translator.trans('session_events', {}, 'cursus')}</h4>
            <ul>
          `
          event['events'].forEach(e => {
            let locationElement = ''

            if (e['location']) {
              locationElement = `
                ${e['location']['street']}, ${e['location']['street_number']}
                <br>${e['location']['pc']} ${e['location']['town']}
                <br>${e['location']['country']}
              `
            }
            eventsElement += `
              <li>
                  <b>${e['name']}</b>
                  <br>
                  [${moment(e['startDate']).format('DD/MM/YYYY HH:mm')}
                  <i class="fa fa-long-arrow-right"></i>
                  ${moment(e['endDate']).format('DD/MM/YYYY HH:mm')}]
                  <br>
                  <br>
                  <b>${Translator.trans('location', {}, 'platform')}</b> :
                  <br>
                  ${e['location'] ? locationElement : ''}
                  ${e['locationExtra'] ? '<br>' + e['locationExtra'] : ''}
                  <hr>
              </li>
            `
          })
          eventsElement += `
            </ul>
          `

          if (registeredSessions[event['id']]) {
            registerBtn = `
              <button class="btn btn-success pull-right disabled">
                  ${Translator.trans('registered', {}, 'platform')}
              </button>
            `
          } else if (pendingSessions[event['id']]) {
            registerBtn = `
              <button class="btn btn-warning pull-right disabled">
                  ${Translator.trans('pending', {}, 'platform')}
              </button>
            `
          } else {
            registerBtn = `
              <button class="btn btn-primary register-to-session-btn-${widgetInstanceId} pull-right" data-session-id="${event['id']}">
                  ${Translator.trans('register', {}, 'platform')}
              </button>
            `
          }
          const title = Translator.trans('session_details', {}, 'cursus')
          const body = `
            <div class="panel panel-default">
                <div class="panel-heading" role="tab">
                    <h4 class="panel-title">
                        <a role="button" data-toggle="collapse" href="#collapseCourse" aria-expanded="true">
                            [${Translator.trans('course', {}, 'cursus')}] ${event['course']['title']} <small>(${event['course']['code']})</small>
                        </a>
                  </h4>
                </div>
                <div id="collapseCourse" class="panel-collapse collapse" role="tabpanel">
                    <div class="panel-body">
                        ${event['course']['description'] ? event['course']['description'] : ''}
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading" role="tab">
                    <h4 class="panel-title">
                        <a role="button" data-toggle="collapse" href="#collapseSession" aria-expanded="true">
                            [${Translator.trans('session', {}, 'cursus')}] ${event['name']}
                        </a>
                  </h4>
                </div>
                <div id="collapseSession" class="panel-collapse collapse in" role="tabpanel">
                    <div class="panel-body">
                        <div class="table-responsive">
                            <table class="table table-condensed table-bordered">
                                ${event['description'] ? '<tr><td colspan="2">' + event['description'] + '</td></tr>' : ''}
                                <tr>
                                    <th>${Translator.trans('start_date', {}, 'platform')}</th>
                                    <td>${moment(event['startDate']).format('DD/MM/YYYY')}</td>
                                </tr>
                                <tr>
                                    <th>${Translator.trans('end_date', {}, 'platform')}</th>
                                    <td>${moment(event['endDate']).format('DD/MM/YYYY')}</td>
                                </tr>
                            </table>
                        </div>
                        ${event['events'].length > 0 ? eventsElement : ''}
                        ${event['publicRegistration'] ? registerBtn : ''}
                    </div>
                </div>
            </div>
          `
          window.Claroline.Modal.simpleContainer(title, body)
        }

        $('body').on('click', `.register-to-session-btn-${widgetInstanceId}`, function () {
          const sessionId = $(this).data('session-id')
          window.Claroline.Modal.confirmRequest(
            Routing.generate('claro_cursus_course_session_self_register', {'session': sessionId}),
            removeRegistrationBtnCalendar,
            {sessionId: sessionId, context: $(this)},
            Translator.trans('session_self_registration_message', {}, 'platform'),
            Translator.trans('session_registration', {}, 'platform')
          )
        })

        initializeCalendar()
      })()
    </script>
{% endblock %}
